/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

/**
 *
 * @author bismart
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferStrategy;
import static java.lang.Math.random;
import static java.lang.Thread.sleep;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javafx.scene.control.CheckBox;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
public class JuegoF extends javax.swing.JFrame {
    Cliente cliente;
    private final BufferStrategy bf;
    String choicesTest=null;


    public void setCliente(Cliente cliente) {
        this.cliente = cliente;
    }

    public Cliente getCliente() {
        return cliente;
    }

    public JuegoF() {
        initComponents();
        createBufferStrategy(2);        //creamos dos buffers
        bf = this.getBufferStrategy();  //obtenemos la estrategia del JFrame
        
    }

    public void iniciarJuego(){
        // cliente.inicializar();
        // cliente.crearDado(10, (this.getHeight() / 2));
        cliente.setFplay(this);
        cliente.inicializarJuego();
        //   cliente.clienteDatos.setTurno(true);
        if (!cliente.clienteDatos.isTurno()) {
            // button2.setEnabled(false);

        }

    }
    
    public void enableButtons(){
           button2.setEnabled(true);
    }
     public void disableButtons(){
          button2.setEnabled(false);
    }
     public void visibleButton(){
         button4.setVisible(false);
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        button4 = new java.awt.Button();
        button3 = new java.awt.Button();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        button1.setLabel("salir del juego");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setLabel("Lanzar");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button4.setLabel("IniciarJuego");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        button3.setLabel("Test");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(335, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
       if(cliente != null && cliente.clienteDatos.getId()>0){
     
        String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) +","+ "" +","+"3"+","+ "desconectado";
        
        ExecutorService service = Executors.newCachedThreadPool();
        Future future = service.submit(new TareaMensaje(cliente.clienteDatos, mprotocolo));
        
        dispose();
        }       
    }//GEN-LAST:event_button1ActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        Rectangle re = new Rectangle(evt.getX(), evt.getY(), 50, 50);
        Dado r = collision(re);
        if (r != null) {
            //JOptionPane.showMessageDialog(this,"i: "+ r.idDado+"v: "+r.valor);
            boolean b = !r.isEstado() ? true : false;
            r.setEstado(b);
            // int i = (int)r[3];
            // dados[i]=r;
            this.cliente.listaDados[r.getIdDado()] = r;
            paint(this.getGraphics());
        }

        DatoDeTablero rt = collisionTablero(re);
        if (rt != null) {
            if(cliente.clienteDatos.cantidaturnos > 0){
            if (cliente.clienteDatos.isTurno()) {
                if (rt.titulo == "BALAS") {
                    int v = cliente.rg.contRepet(1);
                    if (v > 0) {
                        if (rt.getPuntaje() + v <= 5) {

                            cliente.rg.balas(rt);
                            cambiarTurnoPrimerTiro();
                             cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);
                              
                           

                        } else {
                            JOptionPane.showMessageDialog(this, "el limite de puntaje es 5");
                        }
                    }else {
                    JOptionPane.showMessageDialog(this, "no hay BALAS");
                }
                } 

                if (rt.titulo == "TONTOS") {
                    int v = cliente.rg.contRepet(2) * 2;
                    if (v > 0) {
                        if (rt.getPuntaje() + v <= 10) {
                            cliente.rg.tontos(rt);
                            cambiarTurnoPrimerTiro();
                            cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);

                          
                        } else {
                            JOptionPane.showMessageDialog(this, "el limite de puntaje es 10");
                        }
                    }else {
                    JOptionPane.showMessageDialog(this, "no hay TONTOS");
                  }
                } 

                if (rt.titulo == "TRICAS") {
                    int v = cliente.rg.contRepet(3) * 3;
                    if (v > 0) {
                        if (rt.getPuntaje() + v <= 15) {
                            cliente.rg.tricas(rt);
                             cambiarTurnoPrimerTiro();
                             cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);

                           
                        } else {
                            JOptionPane.showMessageDialog(this, "el limite de puntaje es 15");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "no hay TRICAS");
                    }
                }

                if (rt.titulo == "CUADRAS") {
                    int v = cliente.rg.contRepet(4) * 4;
                    if (v > 0) {
                        if (rt.getPuntaje() + v <= 20) {
                            cliente.rg.cuadras(rt);
                            cambiarTurnoPrimerTiro();
                            cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);

                            
                        } else {
                            JOptionPane.showMessageDialog(this, "el limite de puntaje es 20");
                        }
                    }else {
                    JOptionPane.showMessageDialog(this, "no hay CUADRAS");
                }
                } 

                if (rt.titulo == "QUINAS") {
                    int v = cliente.rg.contRepet(5) * 5;
                    if (v > 0) {
                        if (rt.getPuntaje() + v <= 25) {
                            cliente.rg.quinas(rt);
                            cambiarTurnoPrimerTiro();
                            cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);

                            
                        } else {
                            JOptionPane.showMessageDialog(this, "el limite de puntaje es 25");
                        }
                    }
                     else {
                    JOptionPane.showMessageDialog(this, "no hay QUINAS");
                }
                }

                if (rt.titulo == "SENAS") {
                    int v = cliente.rg.contRepet(6) * 6;
                    if (v > 0) {
                        if (rt.getPuntaje() + v <= 30) {
                            cliente.rg.senas(rt);
                            cambiarTurnoPrimerTiro();
                            cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);

                            
                        } else {
                            JOptionPane.showMessageDialog(this, "el limite de puntaje es 30");
                        }
                    } else {
                    JOptionPane.showMessageDialog(this, "no hay SENAS");
                }

                }
                if (rt.titulo == "ESCALERA") {
                    if (cliente.rg.esEscalera()) {
                        System.out.println("ctd oportunidades= " + cliente.rg.cantOportunidades);
                        if (cliente.rg.cantOportunidades == 1) {

                            cliente.rg.escalera(rt, 25);
                             cambiarTurnoPrimerTiro();
                             cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);

                           
                        } else {

                            cliente.rg.escalera(rt, 20);
                            cambiarTurnoPrimerTiro();
                            cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);
                            
                            // JOptionPane.showMessageDialog(this, "puntaje 20");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "no es escalera");
                    }

                }

                if (rt.titulo == "FULL") {
                    if (cliente.rg.esFull()) {
                        System.out.println("ctd oportunidades= " + cliente.rg.cantOportunidades);
                        if (cliente.rg.cantOportunidades == 1) {
                            cliente.rg.full(rt, 35);
                             cambiarTurnoPrimerTiro();
                             cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);

                           
                        } else {

                            cliente.rg.full(rt, 30);
                            cambiarTurnoPrimerTiro();
                            cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);
                            //  JOptionPane.showMessageDialog(this, "puntaje 30");
                            
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "no es full");
                    }
                }
                if (rt.titulo == "POCKET") {
                    if (cliente.rg.isPocket()) {
                        System.out.println("ctd oportunidades= " + cliente.rg.cantOportunidades);
                        if (cliente.rg.cantOportunidades == 1) {
                            cliente.rg.poket(rt, 45);
                             cambiarTurnoPrimerTiro();
                             cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);
                            
                        } else {
                            cliente.rg.poket(rt, 40);
                             cambiarTurnoPrimerTiro();
                             cliente.rg.cantOportunidades=0;
                            String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "4" + ","
                                    + rt.getFila() + ":" + rt.getCol() + ":" + rt.getPuntaje()+
                             ":"+ cliente.clienteDatos.cantidaturnos +":"+String.valueOf(cliente.tableroDeCacho.cantidadPuntos());
                            cliente.actualizarTableroEventos(mprotocolo);
                            //  JOptionPane.showMessageDialog(this, "puntaje 40");
                           
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "no es poket");
                    }

                    //JOptionPane.showMessageDialog(this, rt.getTitulo() + "valor" + rt.getPuntaje());
                }

            } else {
                JOptionPane.showMessageDialog(this, "No es tu turno");
            }
            }else{
                JOptionPane.showMessageDialog(this, "Se termino tus 9 rondas"); 
            }
            paint(this.getGraphics());
        }
     
    }//GEN-LAST:event_formMousePressed

    public void cambiarTurnoPrimerTiro(){
              cliente.clienteDatos.cantidaturnos--;
              cambiarTurnoPlay();
              cliente.clienteDatos.setTurno(false);
              repaint();
    }
    
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        String[] valores = {"none", "grande", "escalera", "full", "poket"};
         if(cliente.clienteDatos.cantidaturnos > 0){
        if (cliente.clienteDatos.isTurno()) { 
            if (cliente.rg.cantOportunidades > 0) {
                this.cliente.lanzarDados(this.choicesTest);
                this.choicesTest=null;
                for (int i = 0; i < 5; i++) {
                    System.out.println("formularios.JuegoF.button2ActionPerformed()" + "lista: "+i +"-" + this.cliente.listaDados[i].getValor() +
                            "estado: " + this.cliente.listaDados[i].isEstado());
                }
                cliente.rg.asignarListaDatas(this.cliente.listaDados);
                
                if(valores[cliente.rg.evaluarJugada()] == valores[1] && cliente.rg.cantOportunidades==2){
                        DatoDeTablero dg=cliente.tableroDeCacho.getGrande();
                        dg.setPuntaje(1000);
                            
                        String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "6" + ","+ "DORMIDA:GANADOR";
                        cliente.actualizarTableroEventos(mprotocolo);
                        
                        JOptionPane.showMessageDialog(this, "GANASTE EL JUEGO");
                }
                if(valores[cliente.rg.evaluarJugada()] == valores[1] && cliente.rg.cantOportunidades==1){
                     DatoDeTablero dg=cliente.tableroDeCacho.getGrande();
                     dg.setPuntaje(50);
                     
                       String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) + "," + "" + "," + "6" + ","+ "DORMIDA:50";
                        cliente.actualizarTableroEventos(mprotocolo);
                       cambiarTurnoPrimerTiro();
                }

                cliente.rg.cantOportunidades--;
               // if (cliente.rg.cantOportunidades == 0) {
                 //   cambiarTurnoPlay();
                  // cliente.clienteDatos.setTurno(false);
                   // repaint();
                //}

                // JOptionPane.showMessageDialog(this,valores[cliente.rg.evaluarJugada()]);
            } else {
                JOptionPane.showMessageDialog(this, valores[cliente.rg.evaluarJugada()] + " Ya no puedes tirar");
            }

            repaint();
        } else {
            JOptionPane.showMessageDialog(this, "no es tu TURNO!!");
        }
        }else{
           JOptionPane.showMessageDialog(this, "Se termino tus 9 rondas"); 
        }

    }//GEN-LAST:event_button2ActionPerformed

   
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
       // JOptionPane.showMessageDialog(this, "Si");
       cliente.actualizarPosDado(10, (this.getHeight() / 2));
       cliente.actualizarTablero((this.getWidth()/2)-(3*50),(this.getHeight()/2));
       cliente.actualizarGrande((this.getWidth()/2)-(3*50)+60, (this.getHeight()/2)+(3*60) + 10);
    }//GEN-LAST:event_formComponentResized

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        System.out.println("formularios.JuegoF.button4ActionPerformed()"+ cliente.cantidadLogueados());
        if(cliente.cantidadLogueados() > 0 ){
          
        String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) +","+ "" +","+"5"+","+ "INICIAR JUEGO";
        
        ExecutorService service = Executors.newCachedThreadPool();
        Future future = service.submit(new TareaMensaje(cliente.clienteDatos, mprotocolo));
      }else{
          JOptionPane.showMessageDialog(this,"espere a que se conecten mas jugadores");
      }
      
    }//GEN-LAST:event_button4ActionPerformed

    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        String[] choices = { "GRANDE", "ESCALERA", "FULL", "POKET"};
    String input = (String) JOptionPane.showInputDialog(this, "Choose now...",
        "The Choice of a Lifetime", JOptionPane.QUESTION_MESSAGE, null, // Use
                                                                        // default
                                                                        // icon
        choices, // Array of choices
        choices[1]); // Initial choice
    
      //  cliente.generarDadoTest(input);
      this.choicesTest=input;
        System.out.println(input);
    }//GEN-LAST:event_button3ActionPerformed

    public void cambiarTurnoPlay(){
         
         if(cliente.cantidadLogueados() > 0 ){
          
        String mprotocolo = String.valueOf(cliente.clienteDatos.getId()) +","+ "" +","+"5"+","+ "INICIAR JUEGO";
        
        ExecutorService service = Executors.newCachedThreadPool();
        Future future = service.submit(new TareaMensaje(cliente.clienteDatos, mprotocolo));
      }
         else{
          JOptionPane.showMessageDialog(this,"espere a que se conecten mas jugadores");
      }
    }
    
    private Dado collision(Rectangle r){
        for (int i = 0; i < cliente.listaDados.length; i++) {
            Dado d = cliente.listaDados[i];

            Rectangle r2 = new Rectangle(d.posX, d.posY, 50, 50);
            if (r.intersects(r2)) {
                return d;
            }
        }
        return null;
    }
    
    
    private DatoDeTablero collisionTablero(Rectangle r){
        for (int i = 0; i < cliente.tableroDeCacho.getTableroDeCacho().length; i++) {
            for (int j = 0; j < cliente.tableroDeCacho.getTableroDeCacho().length; j++) {
                DatoDeTablero dt = cliente.tableroDeCacho.getTableroDeCacho()[i][j];
                Rectangle r2 = new Rectangle(dt.posX, dt.posY, 50, 50);
                if (r.intersects(r2)) {
                    return dt;
                }
            }
        }

  return null;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JuegoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JuegoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JuegoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JuegoF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JuegoF().setVisible(true);
            }
        });
    }
     @Override
    public void paint(Graphics g) {
        
        Graphics2D g2 = null;
 
        try {
            //obtenemos uno de los buffers para dibujar
            g2 = (Graphics2D) bf.getDrawGraphics();
 
            paint(g2);
        } finally {
            if(g2!=null)
                g2.dispose();
        }
 
        //pintamos el buffer en pantalla
        bf.show();
    }
    public void repaintRunable(){  
        class OneShotTask implements Runnable {

            javax.swing.JFrame f;

            OneShotTask(javax.swing.JFrame f) {
                this.f= f;
            }

            public void run() {
                 while (true) {
                    f. paint(f.getGraphics());
                    try {
                        sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        
        Thread t = new Thread(new OneShotTask(this));
        t.start();  
     
    }
  
    public void paint(Graphics2D g2) {
        g2.setColor(new Color(220,220,220));  
       g2.fillRect(0,0,this.getWidth(), this.getHeight());
       paingListPlayer(g2);  
      // paintPlayer(cliente.clienteDatos,g2,(this.getWidth()/2)-(3*50),(this.getHeight()/2));
       
        dibujarDados(g2);
        dibujarTableroCacho(g2);
    }
    
   public void paingListPlayer(Graphics2D g2){
    int i=0;
    for (ClienteDatos value : cliente.listaClientesConectados.values()) {
        if(value.getId() != cliente.clienteDatos.getId() && value.isPlay() == true){
          paintPlayer(value,g2,50+(i*55*3),50);
          i++;
       //   System.out.println(value);
        }
    }
   }
    
    public void paintPlayer(ClienteDatos clientePlay, Graphics2D g2,int posIniX,int posIniY ){
        int numero=0;

        if (clientePlay.isLogueado()) {
            g2.setColor(Color.GREEN);
        } else {
            g2.setColor(Color.RED);
        }
                
        g2.fillRect(posIniX,posIniY-15, 10, 10);
        
        g2.setColor(Color.DARK_GRAY);
        g2.drawString(clientePlay.getUser(),posIniX+15,posIniY-5); //nombre cliente
        
        
       // System.out.println("formularios.J"+ cliente.clienteDatos.isTurno());
         if (clientePlay.isTurno()) {
            g2.setColor(Color.GREEN);
        } else {
            g2.setColor(Color.YELLOW);
        }
                
        g2.fillRect(posIniX+60,posIniY-15, 10, 10);
        
        g2.setColor(Color.DARK_GRAY);
        g2.drawString(String.valueOf(clientePlay.isTurno()),posIniX+60+15,posIniY-5);
           
      int[][] m=clientePlay.tableroCacho;
        
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m.length; j++) {
                g2.setColor(new Color(230,230,250));
                g2.fillRect(posIniX + i * 50, posIniY + j * 50, 50, 50);
                g2.setColor(Color.DARK_GRAY);
                g2.drawRect(posIniX + i * 50, posIniY + j * 50, 50, 50);
                g2.drawString(String.valueOf(m[i][j]), posIniX + i * 50 + 25, posIniY + j * 50 + 25);
            }
        }

        g2.setColor(new Color(230,230,250));
        g2.fillRect(posIniX + 50, posIniY + 50 * 3, 50, 50);
        g2.setColor(Color.DARK_GRAY);
        g2.drawRect(posIniX + 50, posIniY + 50 * 3, 50, 50);
        g2.drawString(String.valueOf(clientePlay.datoGrande), posIniX + 50 + 25, posIniY + 50 * 3 + 25);
        
     
    }
    
    public void dibujarTableroCacho(Graphics2D g2){
        int numero = 0;
        int posIniX = cliente.tableroDeCacho.getTableroDeCacho()[0][0].getPosX();
        int posIniY = cliente.tableroDeCacho.getTableroDeCacho()[0][0].getPosY()-5;
        //  MarcadorCacho tabla=lis;   
        if (cliente != null) {
            
        if (cliente.clienteDatos.isLogueado()) {
            g2.setColor(Color.GREEN);
        } else {
            g2.setColor(Color.RED);
        }
                
        g2.fillRect(posIniX,posIniY-15, 10, 10);
        
        g2.setColor(Color.DARK_GRAY);
        g2.drawString(cliente.clienteDatos.getUser(),posIniX+15,posIniY-5); //nombre cliente
        
         //  System.out.println("formularios.tablero"+ cliente.clienteDatos.isTurno());
         if (cliente.clienteDatos.isTurno()) {
            g2.setColor(Color.GREEN);
        } else {
            g2.setColor(Color.YELLOW);
        }
                
        g2.fillRect(posIniX+60,posIniY-15, 10, 10);
        
        g2.setColor(Color.DARK_GRAY);
        g2.drawString(String.valueOf(cliente.clienteDatos.isTurno()),posIniX+60+15,posIniY-5); //Turno
        
            for (int i = 0; i < cliente.tableroDeCacho.getTableroDeCacho().length; i++) {
                for (int j = 0; j < cliente.tableroDeCacho.getTableroDeCacho().length; j++) {
                    DatoDeTablero dt = cliente.tableroDeCacho.getTableroDeCacho()[i][j];
                     g2.setColor(new Color(255,228,225));  
                    g2.fillRect(dt.getPosX(), dt.getPosY(), 60, 60);
                    g2.setColor(Color.DARK_GRAY);
                    g2.drawRect(dt.getPosX(), dt.getPosY(), 60, 60);
                    
                    g2.drawString(String.valueOf(dt.getTitulo()), dt.getPosX() + 10, dt.getPosY() + 20);
                    g2.drawString(String.valueOf(dt.getPuntaje()), dt.getPosX() + 25, dt.getPosY() + 35);
                }
            }
            DatoDeTablero dg=cliente.tableroDeCacho.getGrande();
                    g2.setColor(new Color(255,228,225));  
                    g2.fillRect(dg.getPosX(), dg.getPosY(), 60, 60);
                    g2.setColor(Color.DARK_GRAY);
                    g2.drawRect(dg.getPosX(), dg.getPosY(), 60, 60);
                    g2.drawString(String.valueOf(dg.getTitulo()), dg.getPosX() + 10, dg.getPosY() + 20);
                    g2.drawString(String.valueOf(dg.getPuntaje()), dg.getPosX() + 25, dg.getPosY() + 35);
                    
           pintarTurnoYPuntos(g2, dg.getPosX() + 150,posIniY +5);         
                    
        }
        
        
        
    }
    
    public void pintarTurnoYPuntos(Graphics2D g2,int posX,int posY){
        int rg = cliente.rg.getCantOportunidades();
        
        g2.setColor(new Color(255,248,220));
        g2.fillRect(posX, posY, 60, 25);
        g2.setColor(Color.DARK_GRAY);
        g2.drawRect(posX, posY, 60, 25);
        g2.drawString("op=  "+ String.valueOf(rg), posX + 10, posY+ 17);
      //  g2.drawString(String.valueOf(rg),posX + 30, posY + 20);
        

        g2.setColor(new Color(255,248,220));
        g2.fillRect(posX, posY+40, 100, 25);
        g2.setColor(Color.DARK_GRAY);
        g2.drawRect(posX, posY+40, 100, 25);
        g2.drawString("Puntos=  "+ String.valueOf(cliente.tableroDeCacho.cantidadPuntos()), posX + 10, posY+ 55);
        
        
        g2.setColor(new Color(255,248,220));
        g2.fillRect(posX, posY+80, 100, 25);
        g2.setColor(Color.DARK_GRAY);
        g2.drawRect(posX, posY+80, 100, 25);
        g2.drawString("Rondas=  "+ String.valueOf(cliente.clienteDatos.getCantidaturnos()), posX + 10, posY+ 95);
   
        }
    
    public void dibujarDados(Graphics2D g2){
        if (cliente.listaClientesConectados.size() > 0) {
           
            for (int i = 0; i < this.cliente.listaDados.length; i++) {
                     
                  Dado d = this.cliente.listaDados[i];
                // boolean c = (boolean)d[2];
                if (d.isEstado()) {
                     g2.setColor(new Color(255,228,225));  
                   
                } else {
                    g2.setColor(new Color(169,169,169));
                }
     
                int x = d.getPosX()+10;
                int y = d.getPosY();
                g2.fillRect(x, y, 50, 50);
                g2.setColor(Color.DARK_GRAY);
                g2.drawRect(x, y, 50, 50);
                g2.drawString(String.valueOf(this.cliente.listaDados[i].getValor()) , x + 25, y + 25);

            }

        }
      }
    
   /* public void crearDado(int posIniX, int posIniY){
        dados = new Object[5];
        int i = 0;
        int valor = 0;
        for (int j = 0; j < 5; j++) {
            Object[] d = {new Integer(posIniX + i * 50), new Integer(posIniY + j * 50), false, j, new Integer(valor)};
            dados[j] = d;
        }
    }*/
    
  /* 
    public void lanzarDados(){
         Random random = new Random();
         
           for (int i = 0; i < dados.length; i++) {
            Object[] d = (Object[]) dados[i];
            if((boolean)d[2] == false){
              int value = random.nextInt(6 + 1) + 1;
              d[4]=value;
            }
            
        }
        
    }*/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private java.awt.Button button4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    // End of variables declaration//GEN-END:variables
}
